#!/usr/bin/env bash
set -euo pipefail

# generate-env.sh
# Generate a .env file for the workshop given a resource group.
# Requirements: az CLI logged in (az login), access to the target resource group.
# Usage: ./scripts/generate-env.sh -g <resource-group> [-o output_file]
# Defaults: output_file = .env in current working directory.

SCRIPT_NAME=$(basename "$0")
OUTPUT_FILE=".env"
RESOURCE_GROUP=""

usage() {
  cat <<EOF
${SCRIPT_NAME} - Generate workshop .env

Usage: ${SCRIPT_NAME} -g <resource-group> [-o <output-file>]

Options:
  -g, --resource-group   (required) Resource group name that contains the deployment
  -o, --output-file      Output file path for .env (default: ./.env)
  -h, --help             Show this help

Behavior:
  * Derives project workspace name: <rg>-project
  * Fetches subscription id
  * Locates Cognitive Services (AIServices/OpenAI) account in the RG (prompts if multiple)
  * Builds endpoint URL
  * Retrieves API key (key1)
  * Writes .env with fixed deployment variables

Environment variables written:
  AZURE_RESOURCE_GROUP_NAME
  AZURE_PROJECT_NAME
  AZURE_OPENAI_DEPLOYMENT_NAME (fixed: gpt-4o-mini)
  AZURE_OPENAI_API_VERSION (fixed: 2024-12-01-preview)
  AZURE_SUBSCRIPTION_ID
  AZURE_OPENAI_ENDPOINT
  AZURE_OPENAI_API_KEY

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -g|--resource-group)
      RESOURCE_GROUP="$2"; shift 2 ;;
    -o|--output-file)
      OUTPUT_FILE="$2"; shift 2 ;;
    -h|--help)
      usage; exit 0 ;;
    *)
      echo "[ERROR] Unknown argument: $1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ -z "$RESOURCE_GROUP" ]]; then
  echo "[ERROR] --resource-group (-g) is required" >&2
  usage
  exit 1
fi

# Pre-flight checks
if ! command -v az >/dev/null 2>&1; then
  echo "[ERROR] Azure CLI (az) not found in PATH" >&2
  exit 4
fi

# Check login. If missing, automatically run device code login so user gets code.
if ! SUBSCRIPTION_ID=$(az account show --query id -o tsv 2>/dev/null); then
  echo "[INFO] No active Azure CLI session. Running 'az login --use-device-code'..." >&2
  if az login --use-device-code; then
    SUBSCRIPTION_ID=$(az account show --query id -o tsv)
  else
    echo "[ERROR] az login failed or was cancelled." >&2
    exit 4
  fi
fi

echo "[INFO] Subscription: ${SUBSCRIPTION_ID}" >&2

# Validate RG exists
if ! az group show -n "$RESOURCE_GROUP" >/dev/null 2>&1; then
  echo "[ERROR] Resource group '$RESOURCE_GROUP' not found" >&2
  exit 2
fi

PROJECT_NAME="${RESOURCE_GROUP}-project"  # Retained for notebooks referencing project naming convention

# Find Cognitive Services account(s) (no jq dependency)
ACCOUNT_NAMES=($(az resource list -g "$RESOURCE_GROUP" --resource-type Microsoft.CognitiveServices/accounts --query "[?kind=='AIServices'||kind=='OpenAI'].name" -o tsv))

if [[ ${#ACCOUNT_NAMES[@]} -eq 0 ]]; then
  echo "[ERROR] No Cognitive Services (AIServices/OpenAI) accounts found in RG" >&2
  exit 3
fi

SELECTED_ACCOUNT=""
if [[ ${#ACCOUNT_NAMES[@]} -eq 1 ]]; then
  SELECTED_ACCOUNT="${ACCOUNT_NAMES[0]}"
  echo "[INFO] Using Cognitive Services account: ${SELECTED_ACCOUNT}" >&2
else
  echo "Multiple Cognitive Services accounts found:" >&2
  i=1
  for acct in "${ACCOUNT_NAMES[@]}"; do
    echo "  $i) $acct" >&2
    i=$((i+1))
  done
  while true; do
    read -rp "Select account [1-${#ACCOUNT_NAMES[@]}]: " choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice>=1 && choice<=${#ACCOUNT_NAMES[@]} )); then
      SELECTED_ACCOUNT="${ACCOUNT_NAMES[$((choice-1))]}"
      break
    else
      echo "Invalid selection." >&2
    fi
  done
fi

ENDPOINT="https://${SELECTED_ACCOUNT}.openai.azure.com/"

# Retrieve key (key1)
# If retrieval fails, we keep empty string.
OPENAI_KEY=""
if ! OPENAI_KEY=$(az cognitiveservices account keys list -n "$SELECTED_ACCOUNT" -g "$RESOURCE_GROUP" --query key1 -o tsv 2>/dev/null); then
  echo "[WARN] Unable to retrieve API key (insufficient role?). Leaving empty." >&2
fi

# Prepare env content
ENV_CONTENT=$(cat <<EOF
# Generated by ${SCRIPT_NAME} on $(date -u +%Y-%m-%dT%H:%M:%SZ)
AZURE_RESOURCE_GROUP_NAME="${RESOURCE_GROUP}"
AZURE_PROJECT_NAME="${PROJECT_NAME}"
AZURE_OPENAI_DEPLOYMENT_NAME="gpt-4o-mini"
AZURE_OPENAI_API_VERSION="2024-12-01-preview"
AZURE_SUBSCRIPTION_ID="${SUBSCRIPTION_ID}"
AZURE_OPENAI_ENDPOINT="${ENDPOINT}"
AZURE_OPENAI_API_KEY="${OPENAI_KEY}"
EOF
)

# Write file (prompt if exists)
if [[ -f "$OUTPUT_FILE" ]]; then
  read -rp "File '$OUTPUT_FILE' exists. Overwrite? [y/N]: " ans
  if [[ ! "$ans" =~ ^[Yy]$ ]]; then
    echo "[INFO] Aborted overwrite." >&2
    echo "----- .env content (not written) -----" >&2
    echo "$ENV_CONTENT"
    exit 0
  fi
fi

echo "$ENV_CONTENT" > "$OUTPUT_FILE"

# Mask key for summary
MASKED_KEY="${OPENAI_KEY:0:4}****${OPENAI_KEY: -4}"
[[ -z "$OPENAI_KEY" ]] && MASKED_KEY="(empty)"

echo "[INFO] Wrote ${OUTPUT_FILE}" >&2
echo "[SUMMARY]" >&2
echo "  Resource Group:   ${RESOURCE_GROUP}" >&2
echo "  Project Name:     ${PROJECT_NAME}" >&2
echo "  Subscription ID:  ${SUBSCRIPTION_ID}" >&2
echo "  OpenAI Account:   ${SELECTED_ACCOUNT}" >&2
echo "  Endpoint:         ${ENDPOINT}" >&2
echo "  Key (masked):     ${MASKED_KEY}" >&2

exit 0
